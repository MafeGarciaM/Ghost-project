import { PagesPage, LoginPage } from './pages';

describe('2e2 ghost app pages', () => {
  beforeEach(() => {

    cy.visit(Cypress.env('login_url'))
    self.loginPage = new LoginPage();
    self.pagesPage = new PagesPage();
    loginPage.login(Cypress.env('username'), Cypress.env('password'))
  })
  
  // Borrar todas las paginas antes de ejecutar
  
  it('test create new page', () => {
    self.pagesPage.clickPageSectionButton()
    cy.wait(2000)
    self.pagesPage.clickNewPageButton()
    cy.wait(2000)
    self.pagesPage.typePageName('Test Page')
    self.pagesPage.typePageText('This is a test page created by Cypress.')
    cy.wait(1000)
    self.pagesPage.clickPublishMenu()
    cy.wait(1000)
    self.pagesPage.clickPublishButton()
    cy.wait(2000)
    self.pagesPage.clickReturnPagesSectionButton()
    cy.wait(1000)
    self.pagesPage.assertPageWithPageNameExists('Test Page')
    cy.wait(2000)
  })
  
  it('test create delete page', () => {
    self.pagesPage.clickPageSectionButton()
    cy.wait(2000)
    self.pagesPage.clickNewPageButton()
    cy.wait(2000)
    self.pagesPage.typePageName('Deletable Page')
    self.pagesPage.typePageText('This is a deletable page created by Cypress.')
    cy.wait(1000)
    self.pagesPage.clickPublishMenu()
    cy.wait(1000)
    self.pagesPage.clickPublishButton()
    cy.wait(2000)
    self.pagesPage.clickReturnPagesSectionButton()
    cy.wait(1000)
    self.pagesPage.assertPageWithPageNameExists('Deletable Page')
    cy.wait(2000)
    
    self.pagesPage.clickFirstPageItem()
    cy.wait(1000)
    self.pagesPage.clickPageMenu()
    cy.wait(2000)
    self.pagesPage.clickPageDeleteButton()
    cy.wait(2000)
    self.pagesPage.clickConfirmDeleteButton()
    cy.wait(1000)
    self.pagesPage.assertPageWithPageNameNotExists('Deletable Page')
  })
  
  it('test create and edit page', () => {
    self.pagesPage.clickPageSectionButton()
    cy.wait(2000)
    self.pagesPage.clickNewPageButton()
    cy.wait(2000)
    self.pagesPage.typePageName('Editable Page')
    cy.wait(1000)
    self.pagesPage.typePageText('This is an editable page created by Cypress.')
    cy.wait(1000)
    self.pagesPage.clickPublishMenu()
    cy.wait(1000)
    self.pagesPage.clickPublishButton()
    cy.wait(2000)
    self.pagesPage.clickReturnPagesSectionButton()
    cy.wait(1000)
    self.pagesPage.assertPageWithPageNameExists('Editable Page')
    cy.wait(2000)
    
    self.pagesPage.clickFirstPageItem()
    cy.wait(1000)
    self.pagesPage.typePageName('Edited Page')
    cy.wait(1000)
    self.pagesPage.typePageText('This is an edited page created by Cypress.')
    cy.wait(1000)
    self.pagesPage.clickPublishMenu()
    cy.wait(1000)
    self.pagesPage.clickPublishButton()
    cy.wait(1000)
    self.pagesPage.clickReturnPagesSectionButton()
    cy.wait(1000)
    
    self.pagesPage.assertPageWithPageNameNotExists('Editable Page')
    self.pagesPage.assertPageWithPageNameExists('Edited Page')
    cy.wait(2000)
  })
  
  it('test unpublish a published page', () => {
    self.pagesPage.clickPageSectionButton()
    cy.wait(2000)
    self.pagesPage.clickNewPageButton()
    cy.wait(2000)
    self.pagesPage.typePageName('Published Page')
    self.pagesPage.typePageText('This is a published page created by Cypress.')
    cy.wait(1000)
    self.pagesPage.clickPublishMenu()
    cy.wait(1000)
    self.pagesPage.clickPublishButton()
    cy.wait(2000)
    self.pagesPage.clickReturnPagesSectionButton()
    cy.wait(1000)
    self.pagesPage.assertPageWithPageNameExists('Test Page')
    cy.wait(2000)
    
    self.pagesPage.clickFirstPageItem()
    cy.wait(2000)
    self.pagesPage.clickPublishMenu()
    cy.wait(2000)
    self.pagesPage.clickUnpublishRadioButton()
    cy.wait(1000)
    self.pagesPage.clickPublishButton()
    cy.wait(1000)
    self.pagesPage.clickReturnPagesSectionButton()
    cy.wait(1000)
    self.pagesPage.assertUnpublishedPageExists()
    cy.wait(2000)
  })
  
})
